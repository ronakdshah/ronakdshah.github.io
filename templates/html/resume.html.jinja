{% extends "base.html.jinja" %}

{% block content %}
    {% include 'accessibility.html.jinja' %}
    <main id="main-content">
        {% include 'summary.html.jinja' %}
        {% include 'experience.html.jinja' %}
        {% include 'skills.html.jinja' %}
        {% include 'projects.html.jinja' %}
        {% include 'education.html.jinja' %}
        {% include 'contact.html.jinja' %}
    </main>
{% endblock %}

{% block scripts %}
    <script>
        // Performance optimizations
        const isReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        const isLowPowerMode = navigator.hardwareConcurrency <= 4;
        
        // Theme management
        class ThemeManager {
            constructor() {
                this.theme = localStorage.getItem('theme') || 'light';
                this.init();
            }
            
            init() {
                this.applyTheme();
                this.setupToggle();
            }
            
            applyTheme() {
                const html = document.documentElement;
                const sunIcon = document.getElementById('sun-icon');
                const moonIcon = document.getElementById('moon-icon');
                
                if (this.theme === 'dark') {
                    html.classList.remove('light');
                    html.classList.add('dark');
                    sunIcon.classList.add('hidden');
                    moonIcon.classList.remove('hidden');
                } else {
                    html.classList.remove('dark');
                    html.classList.add('light');
                    sunIcon.classList.remove('hidden');
                    moonIcon.classList.add('hidden');
                }
            }
            
            toggle() {
                this.theme = this.theme === 'light' ? 'dark' : 'light';
                localStorage.setItem('theme', this.theme);
                this.applyTheme();
                
                // Trigger custom event for other components
                window.dispatchEvent(new CustomEvent('themeChanged', { detail: { theme: this.theme } }));
            }
            
            setupToggle() {
                const toggle = document.getElementById('theme-toggle');
                if (toggle) {
                    toggle.addEventListener('click', () => this.toggle());
                }
            }
        }
        
        // Initialize theme manager
        const themeManager = new ThemeManager();
        
        // Enhanced intersection observer with performance optimizations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
                    
                    // Animate skill progress bars with reduced motion support
                    if (entry.target.querySelector('.skill-progress') && !isReducedMotion) {
                        const progressBars = entry.target.querySelectorAll('.skill-progress');
                        progressBars.forEach((bar, index) => {
                            const width = bar.style.width;
                            bar.style.width = '0%';
                            setTimeout(() => {
                                bar.style.width = width;
                            }, isLowPowerMode ? 0 : 200 + (index * 50));
                        });
                    }
                }
            });
        }, observerOptions);

        // Observe all animated elements with lazy loading
        const animatedElements = document.querySelectorAll('.fade-in, .slide-in-left, .slide-in-right');
        animatedElements.forEach(el => {
            observer.observe(el);
        });

        // Skill tab functionality with performance optimizations and accessibility
        document.addEventListener('DOMContentLoaded', function() {
            const skillTabs = document.querySelectorAll('.skill-tab');
            const skillContents = document.querySelectorAll('.skill-content');

            skillTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const category = this.getAttribute('data-category');
                    
                    // Update tab styles and ARIA attributes
                    skillTabs.forEach((t, index) => {
                        t.classList.remove('active', 'bg-gradient-to-r', 'from-purple-600', 'to-blue-600', 'text-white', 'shadow-lg');
                        t.classList.add('bg-gray-100', 'text-gray-700');
                        t.setAttribute('aria-selected', 'false');
                    });
                    this.classList.add('active', 'bg-gradient-to-r', 'from-purple-600', 'to-blue-600', 'text-white', 'shadow-lg');
                    this.classList.remove('bg-gray-100', 'text-gray-700');
                    this.setAttribute('aria-selected', 'true');
                    
                    // Show/hide content with smooth transitions
                    skillContents.forEach(content => {
                        content.classList.add('hidden');
                        content.classList.remove('active');
                    });
                    
                    const targetContent = document.getElementById(category);
                    if (targetContent) {
                        targetContent.classList.remove('hidden');
                        targetContent.classList.add('active');
                        
                        // Animate progress bars in the new content
                        if (!isReducedMotion) {
                            const progressBars = targetContent.querySelectorAll('.skill-progress');
                            progressBars.forEach((bar, index) => {
                                const width = bar.style.width;
                                bar.style.width = '0%';
                                setTimeout(() => {
                                    bar.style.width = width;
                                }, isLowPowerMode ? 0 : index * 100);
                            });
                        }
                        
                        // Announce tab change for screen readers
                        if (typeof announceSkillTabChange === 'function') {
                            announceSkillTabChange(category);
                        }
                    }
                });
            });
        });

        // Experience toggle functionality with enhanced animations and accessibility
        function toggleExperience(index) {
            const details = document.getElementById(`experience-${index}`);
            const button = details.previousElementSibling.querySelector('.expand-button');
            
            if (details.classList.contains('expanded')) {
                details.classList.remove('expanded');
                button.classList.remove('expanded');
                button.setAttribute('aria-expanded', 'false');
            } else {
                details.classList.add('expanded');
                button.classList.add('expanded');
                button.setAttribute('aria-expanded', 'true');
                
                // Add a subtle animation to the content
                if (!isReducedMotion) {
                    const items = details.querySelectorAll('.bg-gray-50');
                    items.forEach((item, i) => {
                        item.style.opacity = '0';
                        item.style.transform = 'translateY(10px)';
                        setTimeout(() => {
                            item.style.transition = 'all 0.3s ease';
                            item.style.opacity = '1';
                            item.style.transform = 'translateY(0)';
                        }, isLowPowerMode ? 0 : i * 100);
                    });
                }
            }
        }

        // Enhanced smooth scrolling with performance optimizations
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    const headerHeight = document.querySelector('header').offsetHeight;
                    const targetPosition = target.offsetTop - headerHeight - 20;
                    
                    if (isReducedMotion) {
                        window.scrollTo(0, targetPosition);
                    } else {
                        window.scrollTo({
                            top: targetPosition,
                            behavior: 'smooth'
                        });
                    }
                    
                    // Focus the target for accessibility
                    setTimeout(() => {
                        target.focus();
                    }, isReducedMotion ? 0 : 500);
                }
            });
        });

        // Optimized number animation with reduced motion support
        function animateNumbers() {
            if (isReducedMotion) return;
            
            const numbers = document.querySelectorAll('.text-4xl.font-bold.text-purple-600, .text-3xl.font-bold');
            numbers.forEach(number => {
                const finalValue = number.textContent;
                const isPercentage = finalValue.includes('%');
                const isCurrency = finalValue.includes('$');
                const isPlus = finalValue.includes('+');
                const numericValue = parseInt(finalValue.replace(/\D/g, ''));
                
                if (numericValue > 0) {
                    let currentValue = 0;
                    const increment = numericValue / (isLowPowerMode ? 20 : 50);
                    const timer = setInterval(() => {
                        currentValue += increment;
                        if (currentValue >= numericValue) {
                            currentValue = numericValue;
                            clearInterval(timer);
                        }
                        let displayValue = Math.floor(currentValue);
                        if (isCurrency) displayValue = '$' + displayValue + 'k';
                        else if (isPlus) displayValue = displayValue + '+';
                        else if (isPercentage) displayValue = displayValue + '%';
                        number.textContent = displayValue;
                    }, isLowPowerMode ? 50 : 30);
                }
            });
        }

        // Trigger number animation when stats section is visible
        const statsObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    animateNumbers();
                    statsObserver.unobserve(entry.target);
                }
            });
        });

        const statsSection = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-3');
        if (statsSection) {
            statsObserver.observe(statsSection);
        }

        // Enhanced hover effects with performance optimizations
        document.querySelectorAll('.tool-icon, .group').forEach(element => {
            element.addEventListener('mouseenter', function() {
                if (isReducedMotion) return;
                
                if (this.classList.contains('tool-icon')) {
                    this.style.transform = 'translateY(-8px) scale(1.05)';
                } else {
                    this.style.transform = 'translateY(-5px)';
                }
            });
            
            element.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0) scale(1)';
            });
        });

        // Optimized typing effect with reduced motion support
        function typeWriter(element, text, speed = 100) {
            if (isReducedMotion) {
                element.textContent = text;
                return;
            }
            
            let i = 0;
            element.innerHTML = '';
            function type() {
                if (i < text.length) {
                    element.innerHTML += text.charAt(i);
                    i++;
                    setTimeout(type, isLowPowerMode ? speed * 2 : speed);
                }
            }
            type();
        }

        // Initialize typing effect when page loads
        document.addEventListener('DOMContentLoaded', () => {
            const heroTitle = document.querySelector('#about h1');
            if (heroTitle && !isReducedMotion) {
                const originalText = heroTitle.textContent;
                setTimeout(() => {
                    typeWriter(heroTitle, originalText, 50);
                }, 1000);
            }
        });

        // Optimized parallax effect with reduced motion support
        if (!isReducedMotion) {
            let parallaxTimeout;
            window.addEventListener('scroll', () => {
                if (parallaxTimeout) return;
                
                parallaxTimeout = setTimeout(() => {
                    const hero = document.querySelector('#about');
                    if (hero) {
                        const scrolled = window.pageYOffset;
                        const rate = scrolled * -0.5;
                        hero.style.transform = `translateY(${rate}px)`;
                    }
                    parallaxTimeout = null;
                }, 16);
            });
        }

        // Optimized scroll-triggered animations for project cards
        const projectObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting && !isReducedMotion) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        });

        document.querySelectorAll('.bg-white.rounded-2xl').forEach(card => {
            if (!isReducedMotion) {
                card.style.opacity = '0';
                card.style.transform = 'translateY(30px)';
                card.style.transition = 'all 0.6s ease';
            }
            projectObserver.observe(card);
        });

        // Optimized counter animation for achievements
        function animateCounters() {
            if (isReducedMotion) return;
            
            const counters = document.querySelectorAll('.text-3xl.font-bold');
            counters.forEach(counter => {
                const finalValue = counter.textContent;
                const numericValue = parseInt(finalValue.replace(/\D/g, ''));
                
                if (numericValue > 0) {
                    let currentValue = 0;
                    const increment = numericValue / (isLowPowerMode ? 15 : 30);
                    const timer = setInterval(() => {
                        currentValue += increment;
                        if (currentValue >= numericValue) {
                            currentValue = numericValue;
                            clearInterval(timer);
                        }
                        counter.textContent = Math.floor(currentValue) + (finalValue.includes('+') ? '+' : '');
                    }, isLowPowerMode ? 100 : 50);
                }
            });
        }

        // Trigger counter animation when achievements section is visible
        const achievementsObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    animateCounters();
                    achievementsObserver.unobserve(entry.target);
                }
            });
        });

        const achievementsSection = document.querySelector('.bg-gradient-to-r.from-purple-600.to-blue-600');
        if (achievementsSection) {
            achievementsObserver.observe(achievementsSection);
        }

        // Performance monitoring (optional)
        if (window.performance && window.performance.mark) {
            window.performance.mark('portfolio-loaded');
            window.performance.measure('portfolio-load-time', 'navigationStart', 'portfolio-loaded');
        }

        // Service Worker registration for offline support (optional)
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                // Uncomment to enable service worker
                // navigator.serviceWorker.register('/sw.js');
            });
        }
    </script>
{% endblock %}
